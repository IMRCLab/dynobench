#include "quadrotor_payload_dynamics_autogen_n2_p.hpp"
#include <cmath>
// Generated on 2024-11-22--14-09-25

namespace dynobench {
void calcV_n2_p(double* ff, double mp, double arm_length, double t2t, const double *m, const double *J_vx, const double *J_vy, const double *J_vz, const double *l, const double *x, const double *u) {
    double x0 = pow(x[6], 2);
    double x1 = pow(x[7], 2);
    double x2 = pow(x[8], 2);
    double x3 = x0 + x1 + x2;
    double x4 = 1.0/x3;
    double x5 = x0*x4;
    double x6 = pow(x[12], 2);
    double x7 = pow(x[13], 2);
    double x8 = pow(x[14], 2);
    double x9 = x6 + x7 + x8;
    double x10 = 1.0/x9;
    double x11 = x10*x6;
    double x12 = 1.0/(m[0]*x5 + m[1]*x11 + mp);
    double x13 = x4*x[6];
    double x14 = x13*x[7];
    double x15 = x10*x[12];
    double x16 = x15*x[13];
    double x17 = m[0]*x14 + m[1]*x16;
    double x18 = x1*x4;
    double x19 = x10*x7;
    double x20 = 1.0/(m[0]*x18 + m[1]*x19 + mp - x12*pow(x17, 2));
    double x21 = x4*x[7]*x[8];
    double x22 = x10*x[13]*x[14];
    double x23 = x13*x[8];
    double x24 = x15*x[14];
    double x25 = m[0]*x23 + m[1]*x24;
    double x26 = x12*x17;
    double x27 = m[0]*x21 + m[1]*x22 - x25*x26;
    double x28 = x2*x4;
    double x29 = x10*x8;
    double x30 = pow(x3, -1.0/2.0);
    double x31 = x30*x[8];
    double x32 = l[0]*m[0]*(pow(x[10], 2) + pow(x[11], 2) + pow(x[9], 2));
    double x33 = pow(x9, -1.0/2.0);
    double x34 = x33*x[14];
    double x35 = l[1]*m[1]*(pow(x[15], 2) + pow(x[16], 2) + pow(x[17], 2));
    double x36 = pow(x[25], 2);
    double x37 = pow(x[26], 2);
    double x38 = pow(x[27], 2);
    double x39 = pow(x[28], 2);
    double x40 = x36 + x37 + x38 + x39;
    double x41 = 2.4525000000000001*m[1];
    double x42 = u[4]*x41;
    double x43 = u[5]*x41;
    double x44 = u[6]*x41;
    double x45 = u[7]*x41;
    double x46 = (x42 + x43 + x44 + x45)/x40;
    double x47 = 2*x46;
    double x48 = x47*x[25];
    double x49 = x47*x[26];
    double x50 = x48*x[27] + x49*x[28];
    double x51 = -x48*x[28] + x49*x[27];
    double x52 = pow(x[18], 2);
    double x53 = pow(x[19], 2);
    double x54 = pow(x[20], 2);
    double x55 = pow(x[21], 2);
    double x56 = x52 + x53 + x54 + x55;
    double x57 = 2.4525000000000001*m[0];
    double x58 = u[0]*x57;
    double x59 = u[1]*x57;
    double x60 = u[2]*x57;
    double x61 = u[3]*x57;
    double x62 = (x58 + x59 + x60 + x61)/x56;
    double x63 = 2*x62;
    double x64 = x63*x[18];
    double x65 = x63*x[19];
    double x66 = x64*x[20] + x65*x[21];
    double x67 = -x64*x[21] + x65*x[20];
    double x68 = -x36*x46 - x37*x46 + x38*x46 + x39*x46;
    double x69 = -x52*x62 - x53*x62 + x54*x62 + x55*x62;
    double x70 = x30*x[6];
    double x71 = x33*x[12];
    double x72 = x11*x50 + x14*x67 + x16*x51 + x23*x69 + x24*x68 - x32*x70 - x35*x71 + x5*x66;
    double x73 = x30*x[7];
    double x74 = x33*x[13];
    double x75 = x14*x66 + x16*x50 + x18*x67 + x19*x51 + x21*x69 + x22*x68 - x26*x72 - x32*x73 - x35*x74;
    double x76 = (-x12*x25*x72 - x20*x27*x75 + x21*x67 + x22*x51 + x23*x66 + x24*x50 + x28*x69 + x29*x68 - x31*x32 - x34*x35)/(m[0]*x28 + m[1]*x29 + mp - x12*pow(x25, 2) - x20*pow(x27, 2));
    double x77 = x20*(-x27*x76 + x75);
    double x78 = x12*(-x17*x77 - x25*x76 + x72);
    double x79 = x30*x[11];
    double x80 = 1.0/l[0];
    double x81 = x80/m[0];
    double x82 = x33*x[17];
    double x83 = 1.0/l[1];
    double x84 = x83/m[1];
    double x85 = (1.0/2.0)/sqrt(x56);
    double x86 = x85*x[24];
    double x87 = x85*x[23];
    double x88 = x85*x[22];
    double x89 = x[23]*x[24];
    double x90 = 1.7341793804025001*arm_length;
    double x91 = m[0]*x90;
    double x92 = u[3]*x91;
    double x93 = u[1]*x91;
    double x94 = -u[0]*x91 + u[2]*x91;
    double x95 = x[22]*x[24];
    double x96 = x[22]*x[23];
    double x97 = (1.0/2.0)/sqrt(x40);
    double x98 = x97*x[31];
    double x99 = x97*x[30];
    double x100 = x97*x[29];
    double x101 = x[30]*x[31];
    double x102 = m[1]*x90;
    double x103 = u[7]*x102;
    double x104 = u[5]*x102;
    double x105 = -u[4]*x102 + u[6]*x102;
    double x106 = x[29]*x[31];
    double x107 = x[29]*x[30];
    ff[0] = x[3];
    ff[1] = x[4];
    ff[2] = x[5];
    ff[3] = x78;
    ff[4] = x77;
    ff[5] = x76 - 9.8100000000000005;
    ff[6] = x31*x[10] - x79*x[7];
    ff[7] = -x31*x[9] + x79*x[6];
    ff[8] = -x70*x[10] + x73*x[9];
    ff[9] = x80*(-x31*x77 + x73*x76) - x81*(-x31*x67 + x69*x73);
    ff[10] = x80*(x31*x78 - x70*x76) - x81*(x31*x66 - x69*x70);
    ff[11] = x80*(x70*x77 - x73*x78) - x81*(-x66*x73 + x67*x70);
    ff[12] = x34*x[16] - x82*x[13];
    ff[13] = -x34*x[15] + x82*x[12];
    ff[14] = -x71*x[16] + x74*x[15];
    ff[15] = x83*(-x34*x77 + x74*x76) - x84*(-x34*x51 + x68*x74);
    ff[16] = x83*(x34*x78 - x71*x76) - x84*(x34*x50 - x68*x71);
    ff[17] = x83*(x71*x77 - x74*x78) - x84*(-x50*x74 + x51*x71);
    ff[18] = -x86*x[19] + x87*x[20] + x88*x[21];
    ff[19] = x86*x[18] + x87*x[21] - x88*x[20];
    ff[20] = x86*x[21] - x87*x[18] + x88*x[19];
    ff[21] = -x86*x[20] - x87*x[19] - x88*x[18];
    ff[22] = (J_vy[0]*x89 - J_vz[0]*x89 + x92 - x93 + x94)/J_vx[0];
    ff[23] = (-J_vx[0]*x95 + J_vz[0]*x95 - x92 + x93 + x94)/J_vy[0];
    ff[24] = (J_vx[0]*x96 - J_vy[0]*x96 - t2t*x58 + t2t*x59 - t2t*x60 + t2t*x61)/J_vz[0];
    ff[25] = x100*x[28] - x98*x[26] + x99*x[27];
    ff[26] = -x100*x[27] + x98*x[25] + x99*x[28];
    ff[27] = x100*x[26] + x98*x[28] - x99*x[25];
    ff[28] = -x100*x[25] - x98*x[27] - x99*x[26];
    ff[29] = (J_vy[1]*x101 - J_vz[1]*x101 + x103 - x104 + x105)/J_vx[1];
    ff[30] = (-J_vx[1]*x106 + J_vz[1]*x106 - x103 + x104 + x105)/J_vy[1];
    ff[31] = (J_vx[1]*x107 - J_vy[1]*x107 - t2t*x42 + t2t*x43 - t2t*x44 + t2t*x45)/J_vz[1];
}
void calcStep_n2_p(double* xnext, double mp, double arm_length, double t2t, const double *m, const double *J_vx, const double *J_vy, const double *J_vz, const double *l, const double *x, const double *u, double dt) {
    double x0 = pow(x[6], 2);
    double x1 = pow(x[7], 2);
    double x2 = pow(x[8], 2);
    double x3 = x0 + x1 + x2;
    double x4 = 1.0/x3;
    double x5 = x0*x4;
    double x6 = pow(x[12], 2);
    double x7 = pow(x[13], 2);
    double x8 = pow(x[14], 2);
    double x9 = x6 + x7 + x8;
    double x10 = 1.0/x9;
    double x11 = x10*x6;
    double x12 = 1.0/(m[0]*x5 + m[1]*x11 + mp);
    double x13 = x4*x[6];
    double x14 = x13*x[7];
    double x15 = x10*x[12];
    double x16 = x15*x[13];
    double x17 = m[0]*x14 + m[1]*x16;
    double x18 = x1*x4;
    double x19 = x10*x7;
    double x20 = 1.0/(m[0]*x18 + m[1]*x19 + mp - x12*pow(x17, 2));
    double x21 = x4*x[7]*x[8];
    double x22 = x10*x[13]*x[14];
    double x23 = x13*x[8];
    double x24 = x15*x[14];
    double x25 = m[0]*x23 + m[1]*x24;
    double x26 = x12*x17;
    double x27 = m[0]*x21 + m[1]*x22 - x25*x26;
    double x28 = x2*x4;
    double x29 = x10*x8;
    double x30 = pow(x3, -1.0/2.0);
    double x31 = x30*x[8];
    double x32 = l[0]*m[0]*(pow(x[10], 2) + pow(x[11], 2) + pow(x[9], 2));
    double x33 = pow(x9, -1.0/2.0);
    double x34 = x33*x[14];
    double x35 = l[1]*m[1]*(pow(x[15], 2) + pow(x[16], 2) + pow(x[17], 2));
    double x36 = pow(x[25], 2);
    double x37 = pow(x[26], 2);
    double x38 = pow(x[27], 2);
    double x39 = pow(x[28], 2);
    double x40 = x36 + x37 + x38 + x39;
    double x41 = 2.4525000000000001*m[1];
    double x42 = u[4]*x41;
    double x43 = u[5]*x41;
    double x44 = u[6]*x41;
    double x45 = u[7]*x41;
    double x46 = (x42 + x43 + x44 + x45)/x40;
    double x47 = 2*x46;
    double x48 = x47*x[25];
    double x49 = x47*x[26];
    double x50 = x48*x[27] + x49*x[28];
    double x51 = -x48*x[28] + x49*x[27];
    double x52 = pow(x[18], 2);
    double x53 = pow(x[19], 2);
    double x54 = pow(x[20], 2);
    double x55 = pow(x[21], 2);
    double x56 = x52 + x53 + x54 + x55;
    double x57 = 2.4525000000000001*m[0];
    double x58 = u[0]*x57;
    double x59 = u[1]*x57;
    double x60 = u[2]*x57;
    double x61 = u[3]*x57;
    double x62 = (x58 + x59 + x60 + x61)/x56;
    double x63 = 2*x62;
    double x64 = x63*x[18];
    double x65 = x63*x[19];
    double x66 = x64*x[20] + x65*x[21];
    double x67 = -x64*x[21] + x65*x[20];
    double x68 = -x36*x46 - x37*x46 + x38*x46 + x39*x46;
    double x69 = -x52*x62 - x53*x62 + x54*x62 + x55*x62;
    double x70 = x30*x[6];
    double x71 = x33*x[12];
    double x72 = x11*x50 + x14*x67 + x16*x51 + x23*x69 + x24*x68 - x32*x70 - x35*x71 + x5*x66;
    double x73 = x30*x[7];
    double x74 = x33*x[13];
    double x75 = x14*x66 + x16*x50 + x18*x67 + x19*x51 + x21*x69 + x22*x68 - x26*x72 - x32*x73 - x35*x74;
    double x76 = (-x12*x25*x72 - x20*x27*x75 + x21*x67 + x22*x51 + x23*x66 + x24*x50 + x28*x69 + x29*x68 - x31*x32 - x34*x35)/(m[0]*x28 + m[1]*x29 + mp - x12*pow(x25, 2) - x20*pow(x27, 2));
    double x77 = x20*(-x27*x76 + x75);
    double x78 = x12*(-x17*x77 - x25*x76 + x72);
    double x79 = x30*x[11];
    double x80 = dt*(x31*x[10] - x79*x[7]) + x[6];
    double x81 = dt*(-x70*x[10] + x73*x[9]) + x[8];
    double x82 = dt*(-x31*x[9] + x79*x[6]) + x[7];
    double x83 = pow(pow(x80, 2) + pow(x81, 2) + pow(x82, 2), -1.0/2.0);
    double x84 = 1.0/l[0];
    double x85 = x84/m[0];
    double x86 = x33*x[17];
    double x87 = dt*(x34*x[16] - x86*x[13]) + x[12];
    double x88 = dt*(-x71*x[16] + x74*x[15]) + x[14];
    double x89 = dt*(-x34*x[15] + x86*x[12]) + x[13];
    double x90 = pow(pow(x87, 2) + pow(x88, 2) + pow(x89, 2), -1.0/2.0);
    double x91 = 1.0/l[1];
    double x92 = x91/m[1];
    double x93 = (1.0/2.0)/sqrt(x56);
    double x94 = x93*x[24];
    double x95 = x93*x[23];
    double x96 = x93*x[22];
    double x97 = dt*(-x94*x[19] + x95*x[20] + x96*x[21]) + x[18];
    double x98 = dt*(-x94*x[20] - x95*x[19] - x96*x[18]) + x[21];
    double x99 = dt*(x94*x[21] - x95*x[18] + x96*x[19]) + x[20];
    double x100 = dt*(x94*x[18] + x95*x[21] - x96*x[20]) + x[19];
    double x101 = pow(pow(x100, 2) + pow(x97, 2) + pow(x98, 2) + pow(x99, 2), -1.0/2.0);
    double x102 = x[23]*x[24];
    double x103 = 1.7341793804025001*arm_length;
    double x104 = m[0]*x103;
    double x105 = u[3]*x104;
    double x106 = u[1]*x104;
    double x107 = -u[0]*x104 + u[2]*x104;
    double x108 = x[22]*x[24];
    double x109 = x[22]*x[23];
    double x110 = (1.0/2.0)/sqrt(x40);
    double x111 = x110*x[31];
    double x112 = x110*x[30];
    double x113 = x110*x[29];
    double x114 = dt*(-x111*x[26] + x112*x[27] + x113*x[28]) + x[25];
    double x115 = dt*(-x111*x[27] - x112*x[26] - x113*x[25]) + x[28];
    double x116 = dt*(x111*x[28] - x112*x[25] + x113*x[26]) + x[27];
    double x117 = dt*(x111*x[25] + x112*x[28] - x113*x[27]) + x[26];
    double x118 = pow(pow(x114, 2) + pow(x115, 2) + pow(x116, 2) + pow(x117, 2), -1.0/2.0);
    double x119 = x[30]*x[31];
    double x120 = m[1]*x103;
    double x121 = u[7]*x120;
    double x122 = u[5]*x120;
    double x123 = -u[4]*x120 + u[6]*x120;
    double x124 = x[29]*x[31];
    double x125 = x[29]*x[30];
    xnext[0] = dt*x[3] + x[0];
    xnext[1] = dt*x[4] + x[1];
    xnext[2] = dt*x[5] + x[2];
    xnext[3] = dt*x78 + x[3];
    xnext[4] = dt*x77 + x[4];
    xnext[5] = dt*(x76 - 9.8100000000000005) + x[5];
    xnext[6] = x80*x83;
    xnext[7] = x82*x83;
    xnext[8] = x81*x83;
    xnext[9] = dt*(x84*(-x31*x77 + x73*x76) - x85*(-x31*x67 + x69*x73)) + x[9];
    xnext[10] = dt*(x84*(x31*x78 - x70*x76) - x85*(x31*x66 - x69*x70)) + x[10];
    xnext[11] = dt*(x84*(x70*x77 - x73*x78) - x85*(-x66*x73 + x67*x70)) + x[11];
    xnext[12] = x87*x90;
    xnext[13] = x89*x90;
    xnext[14] = x88*x90;
    xnext[15] = dt*(x91*(-x34*x77 + x74*x76) - x92*(-x34*x51 + x68*x74)) + x[15];
    xnext[16] = dt*(x91*(x34*x78 - x71*x76) - x92*(x34*x50 - x68*x71)) + x[16];
    xnext[17] = dt*(x91*(x71*x77 - x74*x78) - x92*(-x50*x74 + x51*x71)) + x[17];
    xnext[18] = x101*x97;
    xnext[19] = x100*x101;
    xnext[20] = x101*x99;
    xnext[21] = x101*x98;
    xnext[22] = x[22] + dt*(J_vy[0]*x102 - J_vz[0]*x102 + x105 - x106 + x107)/J_vx[0];
    xnext[23] = x[23] + dt*(-J_vx[0]*x108 + J_vz[0]*x108 - x105 + x106 + x107)/J_vy[0];
    xnext[24] = x[24] + dt*(J_vx[0]*x109 - J_vy[0]*x109 - t2t*x58 + t2t*x59 - t2t*x60 + t2t*x61)/J_vz[0];
    xnext[25] = x114*x118;
    xnext[26] = x117*x118;
    xnext[27] = x116*x118;
    xnext[28] = x115*x118;
    xnext[29] = x[29] + dt*(J_vy[1]*x119 - J_vz[1]*x119 + x121 - x122 + x123)/J_vx[1];
    xnext[30] = x[30] + dt*(-J_vx[1]*x124 + J_vz[1]*x124 - x121 + x122 + x123)/J_vy[1];
    xnext[31] = x[31] + dt*(J_vx[1]*x125 - J_vy[1]*x125 - t2t*x42 + t2t*x43 - t2t*x44 + t2t*x45)/J_vz[1];
}
} // namespace dynobench
