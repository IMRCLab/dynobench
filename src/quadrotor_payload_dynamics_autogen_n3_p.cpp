#include "quadrotor_payload_dynamics_autogen_n3_p.hpp"
#include <cmath>
// Generated on 2024-11-22--14-09-26

namespace dynobench {
void calcV_n3_p(double* ff, double mp, double arm_length, double t2t, const double *m, const double *J_vx, const double *J_vy, const double *J_vz, const double *l, const double *x, const double *u) {
    double x0 = pow(x[6], 2);
    double x1 = pow(x[7], 2);
    double x2 = pow(x[8], 2);
    double x3 = x0 + x1 + x2;
    double x4 = 1.0/x3;
    double x5 = x0*x4;
    double x6 = pow(x[12], 2);
    double x7 = pow(x[13], 2);
    double x8 = pow(x[14], 2);
    double x9 = x6 + x7 + x8;
    double x10 = 1.0/x9;
    double x11 = x10*x6;
    double x12 = pow(x[18], 2);
    double x13 = pow(x[19], 2);
    double x14 = pow(x[20], 2);
    double x15 = x12 + x13 + x14;
    double x16 = 1.0/x15;
    double x17 = x12*x16;
    double x18 = 1.0/(m[0]*x5 + m[1]*x11 + m[2]*x17 + mp);
    double x19 = x4*x[6];
    double x20 = x19*x[7];
    double x21 = x10*x[12];
    double x22 = x21*x[13];
    double x23 = x16*x[18];
    double x24 = x23*x[19];
    double x25 = m[0]*x20 + m[1]*x22 + m[2]*x24;
    double x26 = x1*x4;
    double x27 = x10*x7;
    double x28 = x13*x16;
    double x29 = 1.0/(m[0]*x26 + m[1]*x27 + m[2]*x28 + mp - x18*pow(x25, 2));
    double x30 = x4*x[7]*x[8];
    double x31 = x10*x[13]*x[14];
    double x32 = x16*x[19]*x[20];
    double x33 = x19*x[8];
    double x34 = x21*x[14];
    double x35 = x23*x[20];
    double x36 = m[0]*x33 + m[1]*x34 + m[2]*x35;
    double x37 = x18*x25;
    double x38 = m[0]*x30 + m[1]*x31 + m[2]*x32 - x36*x37;
    double x39 = x2*x4;
    double x40 = x10*x8;
    double x41 = x14*x16;
    double x42 = pow(x3, -1.0/2.0);
    double x43 = x42*x[8];
    double x44 = l[0]*m[0]*(pow(x[10], 2) + pow(x[11], 2) + pow(x[9], 2));
    double x45 = pow(x9, -1.0/2.0);
    double x46 = x45*x[14];
    double x47 = l[1]*m[1]*(pow(x[15], 2) + pow(x[16], 2) + pow(x[17], 2));
    double x48 = pow(x15, -1.0/2.0);
    double x49 = x48*x[20];
    double x50 = l[2]*m[2]*(pow(x[21], 2) + pow(x[22], 2) + pow(x[23], 2));
    double x51 = pow(x[31], 2);
    double x52 = pow(x[32], 2);
    double x53 = pow(x[33], 2);
    double x54 = pow(x[34], 2);
    double x55 = x51 + x52 + x53 + x54;
    double x56 = 2.4525000000000001*m[1];
    double x57 = u[4]*x56;
    double x58 = u[5]*x56;
    double x59 = u[6]*x56;
    double x60 = u[7]*x56;
    double x61 = (x57 + x58 + x59 + x60)/x55;
    double x62 = 2*x61;
    double x63 = x62*x[31];
    double x64 = x62*x[32];
    double x65 = x63*x[33] + x64*x[34];
    double x66 = -x63*x[34] + x64*x[33];
    double x67 = pow(x[38], 2);
    double x68 = pow(x[39], 2);
    double x69 = pow(x[40], 2);
    double x70 = pow(x[41], 2);
    double x71 = x67 + x68 + x69 + x70;
    double x72 = 2.4525000000000001*m[2];
    double x73 = u[10]*x72;
    double x74 = u[11]*x72;
    double x75 = u[8]*x72;
    double x76 = u[9]*x72;
    double x77 = (x73 + x74 + x75 + x76)/x71;
    double x78 = 2*x77;
    double x79 = x78*x[38];
    double x80 = x78*x[39];
    double x81 = x79*x[40] + x80*x[41];
    double x82 = -x79*x[41] + x80*x[40];
    double x83 = pow(x[24], 2);
    double x84 = pow(x[25], 2);
    double x85 = pow(x[26], 2);
    double x86 = pow(x[27], 2);
    double x87 = x83 + x84 + x85 + x86;
    double x88 = 2.4525000000000001*m[0];
    double x89 = u[0]*x88;
    double x90 = u[1]*x88;
    double x91 = u[2]*x88;
    double x92 = u[3]*x88;
    double x93 = (x89 + x90 + x91 + x92)/x87;
    double x94 = 2*x93;
    double x95 = x94*x[24];
    double x96 = x94*x[25];
    double x97 = x95*x[26] + x96*x[27];
    double x98 = -x95*x[27] + x96*x[26];
    double x99 = -x51*x61 - x52*x61 + x53*x61 + x54*x61;
    double x100 = -x67*x77 - x68*x77 + x69*x77 + x70*x77;
    double x101 = -x83*x93 - x84*x93 + x85*x93 + x86*x93;
    double x102 = x42*x[6];
    double x103 = x45*x[12];
    double x104 = x48*x[18];
    double x105 = x100*x35 + x101*x33 - x102*x44 - x103*x47 - x104*x50 + x11*x65 + x17*x81 + x20*x98 + x22*x66 + x24*x82 + x34*x99 + x5*x97;
    double x106 = x42*x[7];
    double x107 = x45*x[13];
    double x108 = x48*x[19];
    double x109 = x100*x32 + x101*x30 - x105*x37 - x106*x44 - x107*x47 - x108*x50 + x20*x97 + x22*x65 + x24*x81 + x26*x98 + x27*x66 + x28*x82 + x31*x99;
    double x110 = (x100*x41 + x101*x39 - x105*x18*x36 - x109*x29*x38 + x30*x98 + x31*x66 + x32*x82 + x33*x97 + x34*x65 + x35*x81 + x40*x99 - x43*x44 - x46*x47 - x49*x50)/(m[0]*x39 + m[1]*x40 + m[2]*x41 + mp - x18*pow(x36, 2) - x29*pow(x38, 2));
    double x111 = x29*(x109 - x110*x38);
    double x112 = x18*(x105 - x110*x36 - x111*x25);
    double x113 = x42*x[11];
    double x114 = 1.0/l[0];
    double x115 = x114/m[0];
    double x116 = x45*x[17];
    double x117 = 1.0/l[1];
    double x118 = x117/m[1];
    double x119 = x48*x[23];
    double x120 = 1.0/l[2];
    double x121 = x120/m[2];
    double x122 = (1.0/2.0)/sqrt(x87);
    double x123 = x122*x[30];
    double x124 = x122*x[29];
    double x125 = x122*x[28];
    double x126 = x[29]*x[30];
    double x127 = 1.7341793804025001*arm_length;
    double x128 = m[0]*x127;
    double x129 = u[3]*x128;
    double x130 = u[1]*x128;
    double x131 = -u[0]*x128 + u[2]*x128;
    double x132 = x[28]*x[30];
    double x133 = x[28]*x[29];
    double x134 = (1.0/2.0)/sqrt(x55);
    double x135 = x134*x[37];
    double x136 = x134*x[36];
    double x137 = x134*x[35];
    double x138 = x[36]*x[37];
    double x139 = m[1]*x127;
    double x140 = u[7]*x139;
    double x141 = u[5]*x139;
    double x142 = -u[4]*x139 + u[6]*x139;
    double x143 = x[35]*x[37];
    double x144 = x[35]*x[36];
    double x145 = (1.0/2.0)/sqrt(x71);
    double x146 = x145*x[44];
    double x147 = x145*x[43];
    double x148 = x145*x[42];
    double x149 = x[43]*x[44];
    double x150 = m[2]*x127;
    double x151 = u[11]*x150;
    double x152 = u[9]*x150;
    double x153 = u[10]*x150 - u[8]*x150;
    double x154 = x[42]*x[44];
    double x155 = x[42]*x[43];
    ff[0] = x[3];
    ff[1] = x[4];
    ff[2] = x[5];
    ff[3] = x112;
    ff[4] = x111;
    ff[5] = x110 - 9.8100000000000005;
    ff[6] = -x113*x[7] + x43*x[10];
    ff[7] = x113*x[6] - x43*x[9];
    ff[8] = -x102*x[10] + x106*x[9];
    ff[9] = x114*(x106*x110 - x111*x43) - x115*(x101*x106 - x43*x98);
    ff[10] = x114*(-x102*x110 + x112*x43) - x115*(-x101*x102 + x43*x97);
    ff[11] = x114*(x102*x111 - x106*x112) - x115*(x102*x98 - x106*x97);
    ff[12] = -x116*x[13] + x46*x[16];
    ff[13] = x116*x[12] - x46*x[15];
    ff[14] = -x103*x[16] + x107*x[15];
    ff[15] = x117*(x107*x110 - x111*x46) - x118*(x107*x99 - x46*x66);
    ff[16] = x117*(-x103*x110 + x112*x46) - x118*(-x103*x99 + x46*x65);
    ff[17] = x117*(x103*x111 - x107*x112) - x118*(x103*x66 - x107*x65);
    ff[18] = -x119*x[19] + x49*x[22];
    ff[19] = x119*x[18] - x49*x[21];
    ff[20] = -x104*x[22] + x108*x[21];
    ff[21] = x120*(x108*x110 - x111*x49) - x121*(x100*x108 - x49*x82);
    ff[22] = x120*(-x104*x110 + x112*x49) - x121*(-x100*x104 + x49*x81);
    ff[23] = x120*(x104*x111 - x108*x112) - x121*(x104*x82 - x108*x81);
    ff[24] = -x123*x[25] + x124*x[26] + x125*x[27];
    ff[25] = x123*x[24] + x124*x[27] - x125*x[26];
    ff[26] = x123*x[27] - x124*x[24] + x125*x[25];
    ff[27] = -x123*x[26] - x124*x[25] - x125*x[24];
    ff[28] = (J_vy[0]*x126 - J_vz[0]*x126 + x129 - x130 + x131)/J_vx[0];
    ff[29] = (-J_vx[0]*x132 + J_vz[0]*x132 - x129 + x130 + x131)/J_vy[0];
    ff[30] = (J_vx[0]*x133 - J_vy[0]*x133 - t2t*x89 + t2t*x90 - t2t*x91 + t2t*x92)/J_vz[0];
    ff[31] = -x135*x[32] + x136*x[33] + x137*x[34];
    ff[32] = x135*x[31] + x136*x[34] - x137*x[33];
    ff[33] = x135*x[34] - x136*x[31] + x137*x[32];
    ff[34] = -x135*x[33] - x136*x[32] - x137*x[31];
    ff[35] = (J_vy[1]*x138 - J_vz[1]*x138 + x140 - x141 + x142)/J_vx[1];
    ff[36] = (-J_vx[1]*x143 + J_vz[1]*x143 - x140 + x141 + x142)/J_vy[1];
    ff[37] = (J_vx[1]*x144 - J_vy[1]*x144 - t2t*x57 + t2t*x58 - t2t*x59 + t2t*x60)/J_vz[1];
    ff[38] = -x146*x[39] + x147*x[40] + x148*x[41];
    ff[39] = x146*x[38] + x147*x[41] - x148*x[40];
    ff[40] = x146*x[41] - x147*x[38] + x148*x[39];
    ff[41] = -x146*x[40] - x147*x[39] - x148*x[38];
    ff[42] = (J_vy[2]*x149 - J_vz[2]*x149 + x151 - x152 + x153)/J_vx[2];
    ff[43] = (-J_vx[2]*x154 + J_vz[2]*x154 - x151 + x152 + x153)/J_vy[2];
    ff[44] = (J_vx[2]*x155 - J_vy[2]*x155 - t2t*x73 + t2t*x74 - t2t*x75 + t2t*x76)/J_vz[2];
}
void calcStep_n3_p(double* xnext, double mp, double arm_length, double t2t, const double *m, const double *J_vx, const double *J_vy, const double *J_vz, const double *l, const double *x, const double *u, double dt) {
    double x0 = pow(x[6], 2);
    double x1 = pow(x[7], 2);
    double x2 = pow(x[8], 2);
    double x3 = x0 + x1 + x2;
    double x4 = 1.0/x3;
    double x5 = x0*x4;
    double x6 = pow(x[12], 2);
    double x7 = pow(x[13], 2);
    double x8 = pow(x[14], 2);
    double x9 = x6 + x7 + x8;
    double x10 = 1.0/x9;
    double x11 = x10*x6;
    double x12 = pow(x[18], 2);
    double x13 = pow(x[19], 2);
    double x14 = pow(x[20], 2);
    double x15 = x12 + x13 + x14;
    double x16 = 1.0/x15;
    double x17 = x12*x16;
    double x18 = 1.0/(m[0]*x5 + m[1]*x11 + m[2]*x17 + mp);
    double x19 = x4*x[6];
    double x20 = x19*x[7];
    double x21 = x10*x[12];
    double x22 = x21*x[13];
    double x23 = x16*x[18];
    double x24 = x23*x[19];
    double x25 = m[0]*x20 + m[1]*x22 + m[2]*x24;
    double x26 = x1*x4;
    double x27 = x10*x7;
    double x28 = x13*x16;
    double x29 = 1.0/(m[0]*x26 + m[1]*x27 + m[2]*x28 + mp - x18*pow(x25, 2));
    double x30 = x4*x[7]*x[8];
    double x31 = x10*x[13]*x[14];
    double x32 = x16*x[19]*x[20];
    double x33 = x19*x[8];
    double x34 = x21*x[14];
    double x35 = x23*x[20];
    double x36 = m[0]*x33 + m[1]*x34 + m[2]*x35;
    double x37 = x18*x25;
    double x38 = m[0]*x30 + m[1]*x31 + m[2]*x32 - x36*x37;
    double x39 = x2*x4;
    double x40 = x10*x8;
    double x41 = x14*x16;
    double x42 = pow(x3, -1.0/2.0);
    double x43 = x42*x[8];
    double x44 = l[0]*m[0]*(pow(x[10], 2) + pow(x[11], 2) + pow(x[9], 2));
    double x45 = pow(x9, -1.0/2.0);
    double x46 = x45*x[14];
    double x47 = l[1]*m[1]*(pow(x[15], 2) + pow(x[16], 2) + pow(x[17], 2));
    double x48 = pow(x15, -1.0/2.0);
    double x49 = x48*x[20];
    double x50 = l[2]*m[2]*(pow(x[21], 2) + pow(x[22], 2) + pow(x[23], 2));
    double x51 = pow(x[31], 2);
    double x52 = pow(x[32], 2);
    double x53 = pow(x[33], 2);
    double x54 = pow(x[34], 2);
    double x55 = x51 + x52 + x53 + x54;
    double x56 = 2.4525000000000001*m[1];
    double x57 = u[4]*x56;
    double x58 = u[5]*x56;
    double x59 = u[6]*x56;
    double x60 = u[7]*x56;
    double x61 = (x57 + x58 + x59 + x60)/x55;
    double x62 = 2*x61;
    double x63 = x62*x[31];
    double x64 = x62*x[32];
    double x65 = x63*x[33] + x64*x[34];
    double x66 = -x63*x[34] + x64*x[33];
    double x67 = pow(x[38], 2);
    double x68 = pow(x[39], 2);
    double x69 = pow(x[40], 2);
    double x70 = pow(x[41], 2);
    double x71 = x67 + x68 + x69 + x70;
    double x72 = 2.4525000000000001*m[2];
    double x73 = u[10]*x72;
    double x74 = u[11]*x72;
    double x75 = u[8]*x72;
    double x76 = u[9]*x72;
    double x77 = (x73 + x74 + x75 + x76)/x71;
    double x78 = 2*x77;
    double x79 = x78*x[38];
    double x80 = x78*x[39];
    double x81 = x79*x[40] + x80*x[41];
    double x82 = -x79*x[41] + x80*x[40];
    double x83 = pow(x[24], 2);
    double x84 = pow(x[25], 2);
    double x85 = pow(x[26], 2);
    double x86 = pow(x[27], 2);
    double x87 = x83 + x84 + x85 + x86;
    double x88 = 2.4525000000000001*m[0];
    double x89 = u[0]*x88;
    double x90 = u[1]*x88;
    double x91 = u[2]*x88;
    double x92 = u[3]*x88;
    double x93 = (x89 + x90 + x91 + x92)/x87;
    double x94 = 2*x93;
    double x95 = x94*x[24];
    double x96 = x94*x[25];
    double x97 = x95*x[26] + x96*x[27];
    double x98 = -x95*x[27] + x96*x[26];
    double x99 = -x51*x61 - x52*x61 + x53*x61 + x54*x61;
    double x100 = -x67*x77 - x68*x77 + x69*x77 + x70*x77;
    double x101 = -x83*x93 - x84*x93 + x85*x93 + x86*x93;
    double x102 = x42*x[6];
    double x103 = x45*x[12];
    double x104 = x48*x[18];
    double x105 = x100*x35 + x101*x33 - x102*x44 - x103*x47 - x104*x50 + x11*x65 + x17*x81 + x20*x98 + x22*x66 + x24*x82 + x34*x99 + x5*x97;
    double x106 = x42*x[7];
    double x107 = x45*x[13];
    double x108 = x48*x[19];
    double x109 = x100*x32 + x101*x30 - x105*x37 - x106*x44 - x107*x47 - x108*x50 + x20*x97 + x22*x65 + x24*x81 + x26*x98 + x27*x66 + x28*x82 + x31*x99;
    double x110 = (x100*x41 + x101*x39 - x105*x18*x36 - x109*x29*x38 + x30*x98 + x31*x66 + x32*x82 + x33*x97 + x34*x65 + x35*x81 + x40*x99 - x43*x44 - x46*x47 - x49*x50)/(m[0]*x39 + m[1]*x40 + m[2]*x41 + mp - x18*pow(x36, 2) - x29*pow(x38, 2));
    double x111 = x29*(x109 - x110*x38);
    double x112 = x18*(x105 - x110*x36 - x111*x25);
    double x113 = x42*x[11];
    double x114 = dt*(-x113*x[7] + x43*x[10]) + x[6];
    double x115 = dt*(-x102*x[10] + x106*x[9]) + x[8];
    double x116 = dt*(x113*x[6] - x43*x[9]) + x[7];
    double x117 = pow(pow(x114, 2) + pow(x115, 2) + pow(x116, 2), -1.0/2.0);
    double x118 = 1.0/l[0];
    double x119 = x118/m[0];
    double x120 = x45*x[17];
    double x121 = dt*(-x120*x[13] + x46*x[16]) + x[12];
    double x122 = dt*(-x103*x[16] + x107*x[15]) + x[14];
    double x123 = dt*(x120*x[12] - x46*x[15]) + x[13];
    double x124 = pow(pow(x121, 2) + pow(x122, 2) + pow(x123, 2), -1.0/2.0);
    double x125 = 1.0/l[1];
    double x126 = x125/m[1];
    double x127 = x48*x[23];
    double x128 = dt*(-x127*x[19] + x49*x[22]) + x[18];
    double x129 = dt*(-x104*x[22] + x108*x[21]) + x[20];
    double x130 = dt*(x127*x[18] - x49*x[21]) + x[19];
    double x131 = pow(pow(x128, 2) + pow(x129, 2) + pow(x130, 2), -1.0/2.0);
    double x132 = 1.0/l[2];
    double x133 = x132/m[2];
    double x134 = (1.0/2.0)/sqrt(x87);
    double x135 = x134*x[30];
    double x136 = x134*x[29];
    double x137 = x134*x[28];
    double x138 = dt*(-x135*x[25] + x136*x[26] + x137*x[27]) + x[24];
    double x139 = dt*(-x135*x[26] - x136*x[25] - x137*x[24]) + x[27];
    double x140 = dt*(x135*x[27] - x136*x[24] + x137*x[25]) + x[26];
    double x141 = dt*(x135*x[24] + x136*x[27] - x137*x[26]) + x[25];
    double x142 = pow(pow(x138, 2) + pow(x139, 2) + pow(x140, 2) + pow(x141, 2), -1.0/2.0);
    double x143 = x[29]*x[30];
    double x144 = 1.7341793804025001*arm_length;
    double x145 = m[0]*x144;
    double x146 = u[3]*x145;
    double x147 = u[1]*x145;
    double x148 = -u[0]*x145 + u[2]*x145;
    double x149 = x[28]*x[30];
    double x150 = x[28]*x[29];
    double x151 = (1.0/2.0)/sqrt(x55);
    double x152 = x151*x[37];
    double x153 = x151*x[36];
    double x154 = x151*x[35];
    double x155 = dt*(-x152*x[32] + x153*x[33] + x154*x[34]) + x[31];
    double x156 = dt*(-x152*x[33] - x153*x[32] - x154*x[31]) + x[34];
    double x157 = dt*(x152*x[34] - x153*x[31] + x154*x[32]) + x[33];
    double x158 = dt*(x152*x[31] + x153*x[34] - x154*x[33]) + x[32];
    double x159 = pow(pow(x155, 2) + pow(x156, 2) + pow(x157, 2) + pow(x158, 2), -1.0/2.0);
    double x160 = x[36]*x[37];
    double x161 = m[1]*x144;
    double x162 = u[7]*x161;
    double x163 = u[5]*x161;
    double x164 = -u[4]*x161 + u[6]*x161;
    double x165 = x[35]*x[37];
    double x166 = x[35]*x[36];
    double x167 = (1.0/2.0)/sqrt(x71);
    double x168 = x167*x[44];
    double x169 = x167*x[43];
    double x170 = x167*x[42];
    double x171 = dt*(-x168*x[39] + x169*x[40] + x170*x[41]) + x[38];
    double x172 = dt*(-x168*x[40] - x169*x[39] - x170*x[38]) + x[41];
    double x173 = dt*(x168*x[41] - x169*x[38] + x170*x[39]) + x[40];
    double x174 = dt*(x168*x[38] + x169*x[41] - x170*x[40]) + x[39];
    double x175 = pow(pow(x171, 2) + pow(x172, 2) + pow(x173, 2) + pow(x174, 2), -1.0/2.0);
    double x176 = x[43]*x[44];
    double x177 = m[2]*x144;
    double x178 = u[11]*x177;
    double x179 = u[9]*x177;
    double x180 = u[10]*x177 - u[8]*x177;
    double x181 = x[42]*x[44];
    double x182 = x[42]*x[43];
    xnext[0] = dt*x[3] + x[0];
    xnext[1] = dt*x[4] + x[1];
    xnext[2] = dt*x[5] + x[2];
    xnext[3] = dt*x112 + x[3];
    xnext[4] = dt*x111 + x[4];
    xnext[5] = dt*(x110 - 9.8100000000000005) + x[5];
    xnext[6] = x114*x117;
    xnext[7] = x116*x117;
    xnext[8] = x115*x117;
    xnext[9] = dt*(x118*(x106*x110 - x111*x43) - x119*(x101*x106 - x43*x98)) + x[9];
    xnext[10] = dt*(x118*(-x102*x110 + x112*x43) - x119*(-x101*x102 + x43*x97)) + x[10];
    xnext[11] = dt*(x118*(x102*x111 - x106*x112) - x119*(x102*x98 - x106*x97)) + x[11];
    xnext[12] = x121*x124;
    xnext[13] = x123*x124;
    xnext[14] = x122*x124;
    xnext[15] = dt*(x125*(x107*x110 - x111*x46) - x126*(x107*x99 - x46*x66)) + x[15];
    xnext[16] = dt*(x125*(-x103*x110 + x112*x46) - x126*(-x103*x99 + x46*x65)) + x[16];
    xnext[17] = dt*(x125*(x103*x111 - x107*x112) - x126*(x103*x66 - x107*x65)) + x[17];
    xnext[18] = x128*x131;
    xnext[19] = x130*x131;
    xnext[20] = x129*x131;
    xnext[21] = dt*(x132*(x108*x110 - x111*x49) - x133*(x100*x108 - x49*x82)) + x[21];
    xnext[22] = dt*(x132*(-x104*x110 + x112*x49) - x133*(-x100*x104 + x49*x81)) + x[22];
    xnext[23] = dt*(x132*(x104*x111 - x108*x112) - x133*(x104*x82 - x108*x81)) + x[23];
    xnext[24] = x138*x142;
    xnext[25] = x141*x142;
    xnext[26] = x140*x142;
    xnext[27] = x139*x142;
    xnext[28] = x[28] + dt*(J_vy[0]*x143 - J_vz[0]*x143 + x146 - x147 + x148)/J_vx[0];
    xnext[29] = x[29] + dt*(-J_vx[0]*x149 + J_vz[0]*x149 - x146 + x147 + x148)/J_vy[0];
    xnext[30] = x[30] + dt*(J_vx[0]*x150 - J_vy[0]*x150 - t2t*x89 + t2t*x90 - t2t*x91 + t2t*x92)/J_vz[0];
    xnext[31] = x155*x159;
    xnext[32] = x158*x159;
    xnext[33] = x157*x159;
    xnext[34] = x156*x159;
    xnext[35] = x[35] + dt*(J_vy[1]*x160 - J_vz[1]*x160 + x162 - x163 + x164)/J_vx[1];
    xnext[36] = x[36] + dt*(-J_vx[1]*x165 + J_vz[1]*x165 - x162 + x163 + x164)/J_vy[1];
    xnext[37] = x[37] + dt*(J_vx[1]*x166 - J_vy[1]*x166 - t2t*x57 + t2t*x58 - t2t*x59 + t2t*x60)/J_vz[1];
    xnext[38] = x171*x175;
    xnext[39] = x174*x175;
    xnext[40] = x173*x175;
    xnext[41] = x172*x175;
    xnext[42] = x[42] + dt*(J_vy[2]*x176 - J_vz[2]*x176 + x178 - x179 + x180)/J_vx[2];
    xnext[43] = x[43] + dt*(-J_vx[2]*x181 + J_vz[2]*x181 - x178 + x179 + x180)/J_vy[2];
    xnext[44] = x[44] + dt*(J_vx[2]*x182 - J_vy[2]*x182 - t2t*x73 + t2t*x74 - t2t*x75 + t2t*x76)/J_vz[2];
}
} // namespace dynobench
